package de.tuhh.diss.harborstorage;

import de.tuhh.diss.harborstorage.sim.HighBayStorage;
import de.tuhh.diss.harborstorage.sim.StorageException;
import de.tuhh.diss.harborstorage.sim.PhysicalCrane;
import de.tuhh.diss.harborstorage.sim.PhysicalHarborStorage;
import de.tuhh.diss.harborstorage.sim.StoragePlace;
import de.tuhh.diss.io.SimpleIO;



public class HarborStorageManagement implements HighBayStorage {
	
	//These are the variables and classes needed in the HSM class that are called
	private CraneControl CC;
	private Packet packet;
	private Slot[] slot;
	private PhysicalCrane cr;
	private PhysicalHarborStorage phs;
	private StoragePlace[] SP;
	private int numPacketStored;
	private int exception;							//Used to eliminate "magic number"
	
	
	public HarborStorageManagement (){
	SimpleIO.print("Generating Harbor.\n");			//Just a check that the program is working
	phs = new PhysicalHarborStorage();				//So phs actually gets made
	cr = phs.getCrane();	
	SP = phs.getStoragePlacesAsArray();
	CC = new CraneControl(cr); 						//crane controller within the HSM constructor
	numPacketStored = 0;
	slot = makeSlotArray(slot); 
	exception = -1;									//Used for throwing exceptions later
	SimpleIO.print("Harbor made.\n");				//Another program operation check
	}
	
	//This method stores a packet in a suitable slot if one is found. If one is not found an exception is thrown.
	public int storePacket(int width, int height, int depth, String description, int weight) throws StorageException {
		SimpleIO.print("I'm working!!!!\n");			//Program operation check, POC for short here on out
		packet = new Packet(width,  height,  depth,  description,  weight);
		int sslot = findSutiable(packet);
		if (sslot == exception){						//Checking for the Exception 
			throw new StorageException("Unable to find a suitable slot.");
		} else {
			int x = slot[sslot].getPositionX();
			int y = slot[sslot].getPositionY();
			//SimpleIO.print(sslot + "\n");				//POC
			//SimpleIO.print(slot[sslot] + "\n");		//POC
			//SimpleIO.print(x + "\n");					//POC
			//SimpleIO.print(y + "\n");					//POC
			CC.storePacket(x, y, packet);
			numPacketStored++;
			slot[sslot].setContainPacket(packet);		//So the slot in our array is filled
			packet.setId( slot[sslot].getNumber()); 	//Assigns packets ID to the slot number
			SimpleIO.print("Packet Stored\n");			//POC
		}
		return 0;
	}
	
	//This method searches the array for the requested packet
	public void retrievePacket(String description) throws StorageException { 
		SimpleIO.print("Retrieving Packet\n");				//POC
		Packet[] packetArray;
		packetArray = getPackets();
		int p = exception;									//Used for the exception, and holding the position of the matching packet. 
															//Later edit: got rid of "magic number" for constant "exception"
		for (int i = 0; i < packetArray.length; i++){
			if ( packetArray[i].getDescription().compareTo(description) == 0){
				p = i;										//This for loop runs through the length of the packetArray and sets p to i 
				break;										//if it finds a matching description then breaks out.
			}
		}
		if (p == exception)									//Used to throw the exception in case a a matching description is not found
															//Later edit: got rid of "magic number" for constant "exception"
			throw new StorageException("A packet with that description was not found.");
		else{
			int id = packetArray[p].getId();
			int s = exception;								//Used for the exception, and holding the position of the matching slot
															//Later edit: got rid of "magic number" for constant "exception"
			for (int i = 0; i < slot.length; i++){
				if (slot[i].getNumber() == id){
					s = i;									//This for loop runs through the length of slot and sets s to i 
					break;									//if it finds a matching ID number then breaks out.
				}
			}
			if (s == exception)								//Used to throw the exception in case a a matching ID number is not found
															//Later edit: got rid of "magic number" for constant "exception"
				throw new StorageException("An error has occured, the packet was found but the slot was not.");	
			else {
				int x = slot[s].getPositionX();
				int y = slot[s].getPositionY();
				
				CC.retrievePacket(x,y);
				slot[s].setContainPacket(null);				//So the slot in our array is emptied
				packetArray[p].setId(0); 					//Assigns packets ID to the slot number
				numPacketStored--;
				SimpleIO.print("Packet Retrieved\n");		//POC
			}
			
		}
		
		
	}
	
	//This method shows what is currently stored in the storage array
	public Packet[] getPackets() {
		Packet[] packetArray;
		int count = 0;
		packetArray = new Packet [numPacketStored];
		for(int i = 0; i < SP.length; i++){						
			if (slot[i].getContainPacket() != null){
				packetArray[count] = slot[i].getContainPacket();
				count++;
			}
		}
		
		return packetArray;
	}
	
	//This method calls the shutdown method of the crane control
	public void shutdown() {
		CC.shutdown();
	}
	
	//This method searches for a suitable slot, goes through each position and checks slots against the requirements of the packet. 
	//Once it finds suitable options, it finds the best fit depending on which is closest.
	private int findSutiable(Packet p){
	int tempslot = exception;						
	double tsqdiff = 0; 
	for(int i = 0; i < SP.length; i++){				
		if (slot[i].getContainPacket() == null && 
			p.getWidth() <= slot[i].getWidth() && 
			p.getHeight() <= slot[i].getHeight() && 
			p.getDepth() <= slot[i].getDepth() && 
			p.getWeight() <= slot[i].getLoadCapacity()){
			
				int volsp = slot[i].getWidth() * slot[i].getHeight() * slot[i].getDepth();
				int volp = p.getWidth() * p.getHeight() * p.getDepth();
				int voldiff = volsp - volp;
				int weightdiff = slot[i].getLoadCapacity() - p.getWeight();
				double sqdiff = Math.sqrt(Math.pow(weightdiff, 2) + Math.pow(voldiff, 2));
				 if(voldiff == 0 && weightdiff == 0){
					tempslot = i;
					break;
					} else if(tempslot == exception){
						tempslot = i;
						tsqdiff = sqdiff;
					} else if(tempslot > exception && sqdiff < tsqdiff){
						tempslot = i;
						tsqdiff = sqdiff;
					}
				}
		}
		return tempslot;
	}
	
	//This method creates the slot storage array
	private Slot[] makeSlotArray(Slot[] s){ 
		s = new Slot[SP.length];
		for (int i = 0; i < SP.length; i++){ 			
			s[i] = new Slot(SP[i].getNumber(), SP[i].getWidth(), SP[i].getHeight(), SP[i].getDepth(), 
					SP[i].getPositionX(),SP[i].getPositionY(), SP[i].getLoadCapacity()); //use this to call the slots out in the findSuitable method, initialize getPacket with null
			s[i].setContainPacket(null);
	
		}
	
		return s;
	}
	
	//This method prints the information of all available slots 
	public void printAvalibleSlots(){
		for (int i = 0; i < slot.length; i++){
			if (slot[i].getContainPacket() == null)
				SimpleIO.print("Slot Number '" + slot[i].getNumber() + "' Size: " + slot[i].getWidth() + "x" + slot[i].getHeight()
				+ "x"  + slot[i].getDepth() + " Load Capacity: " + slot[i].getLoadCapacity() + "\n");
		
		}
	}
		
	}
